Description: FSI DataZone Demo

Resources:
  
  S3Bucket:
    Type: AWS::S3::Bucket

  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: 'data-zone-cloud9'
      Description: 'Cloud9 development enviorment'
      ImageId: 'amazonlinux-2-x86_64'
      InstanceType: 't2.large'
      AutomaticStopTimeMinutes: '30'
      Repositories: [
        {
          "PathComponent" : '/DataZone_Demo_FSI',
          "RepositoryUrl" : 'https://github.com/ev2900/DataZone_Demo_FSI.git'
        }
      ]

  GlueCrawlerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'Glue_Crawler_IAM_Role'
      Description: 'IAM role for Glue Crawler'
      # Trust relationships
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # Premissions
      Policies:
        - PolicyName: LakeFormation_GetDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: '*'
        - PolicyName: S3_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lakeformation:GetDataAccess'
                Resource: '*'
        - PolicyName: AWS_GlueServiceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'glue:*'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketAcl'
                  - 'ec2:DescribeVpcEndpoints'
                  - 'ec2:DescribeRouteTables'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcAttribute'
                  - 'iam:ListRolePolicies'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action: 's3:CreateBucket'
                Resource: 'arn:aws:s3:::aws-glue-*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: 
                  - 'arn:aws:s3:::aws-glue-*/*'
                  - 'arn:aws:s3:::*/*aws-glue-*/*'
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: 
                  - 'arn:aws:s3:::crawler-public*'
                  - 'arn:aws:s3:::aws-glue-*'
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:/aws-glue/*'
              - Effect: Allow
                Action: 
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                Resource: 
                  - 'arn:aws:ec2:*:*:network-interface/*'
                  - 'arn:aws:ec2:*:*:security-group/*'
                  - 'arn:aws:ec2:*:*:instance/*'

  RedshiftServerlessIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'Redshift_Serverless_IAM_Role'
      Description: 'IAM role for Redshift Serverless'
      # Trust relationships
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # Premissions
      Policies:
        - PolicyName: S3_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:*'
                  - 's3-object-lambda:*'
                Resource: '*'
        - PolicyName: AmazonRedshiftAllCommandsFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'sagemaker:CreateTrainingJob'
                  - 'sagemaker:CreateAutoMLJob'
                  - 'sagemaker:CreateCompilationJob'
                  - 'sagemaker:CreateEndpoint'
                  - 'sagemaker:DescribeAutoMLJob'
                  - 'sagemaker:DescribeTrainingJob'
                  - 'sagemaker:DescribeCompilationJob'
                  - 'sagemaker:DescribeProcessingJob'
                  - 'sagemaker:DescribeTransformJob'
                  - 'sagemaker:ListCandidatesForAutoMLJob'
                  - 'sagemaker:StopAutoMLJob'
                  - 'sagemaker:StopCompilationJob'
                  - 'sagemaker:StopTrainingJob'
                  - 'sagemaker:DescribeEndpoint'
                  - 'sagemaker:InvokeEndpoint'
                  - 'sagemaker:StopProcessingJob'
                  - 'sagemaker:CreateModel'
                  - 'sagemaker:CreateProcessingJob'
                Resource:
                  - 'arn:aws:sagemaker:*:*:model/*redshift*'
                  - 'arn:aws:sagemaker:*:*:training-job/*redshift*'
                  - 'arn:aws:sagemaker:*:*:automl-job/*redshift*'
                  - 'arn:aws:sagemaker:*:*:compilation-job/*redshift*'
                  - 'arn:aws:sagemaker:*:*:processing-job/*redshift*'
                  - 'arn:aws:sagemaker:*:*:transform-job/*redshift*'
                  - 'arn:aws:sagemaker:*:*:endpoint/*redshift*'
              - Effect: Allow
                Action: 's3:CreateBucket'
                Resource: 'arn:aws:s3:::aws-glue-*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: 
                  - 'arn:aws:logs:*:*:log-group:/aws/sagemaker/Endpoints/*redshift*'
                  - 'arn:aws:logs:*:*:log-group:/aws/sagemaker/ProcessingJobs/*redshift*'
                  - 'arn:aws:logs:*:*:log-group:/aws/sagemaker/TrainingJobs/*redshift*'
                  - 'arn:aws:logs:*:*:log-group:/aws/sagemaker/TransformJobs/*redshift*'
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: '*'
              - Effect: Allow
                Action: 
                  - 'dynamodb:Scan'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:Getitem'
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/*redshift*'
                  - 'arn:aws:dynamodb:*:*:table/*redshift*/index/*'
              - Effect: Allow
                Action: 'elasticmapreduce:ListInstances'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*redshift*'
              - Effect: Allow
                Action: 
                  - 'glue:CreateDatabase'
                  - 'glue:DeleteDatabase'
                  - 'glue:GetDatabase'
                  - 'glue:GetDatabases'
                  - 'glue:UpdateDatabase'
                  - 'glue:CreateTable'
                  - 'glue:DeleteTable'
                  - 'glue:BatchDeleteTable'
                  - 'glue:UpdateTable'
                  - 'glue:GetTable'
                  - 'glue:GetTables'
                  - 'glue:BatchCreatePartition'
                  - 'glue:CreatePartition'
                  - 'glue:DeletePartition'
                  - 'glue:BatchDeletePartition'
                  - 'glue:UpdatePartition'
                  - 'glue:GetPartition'
                  - 'glue:GetPartitions'
                  - 'glue:BatchGetPartition'
                Resource: 
                  - 'arn:aws:glue:*:*:table/*redshift*/*'
                  - 'arn:aws:glue:*:*:catalog'
                  - 'arn:aws:glue:*:*:database/*redshift*'
              - Effect: Allow
                Action: 
                  - 'secretsmanager:GetResourcePolicy'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                Resource: 'arn:aws:secretsmanager:*:*:secret:*redshift*'
              - Effect: Allow
                Action: 
                  - 'secretsmanager:GetRandomPassword'
                  - 'secretsmanager:ListSecrets'
                Resource: '*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource: 'arn:aws:iam::*:role/*'
 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      Tags:
        - Key: Name
          Value: redshift-vpc
      EnableDnsSupport: True
      EnableDnsHostnames: True

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: redshift-internet-gateway
  # Attach InternetGateway to VPC
  AttachInternetGatewayVPC:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: 
        Ref: VPCInternetGateway
      VpcId:
        Ref: VPC
        
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ecs-subnet-1 | us-east-1a

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ecs-subnet-2 | us-east-1b

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ecs-subnet-2 | us-east-1c

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'security group'
      GroupDescription: 'security group'
      VpcId: !Ref VPC
      # Egress rules
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1 
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: 'ecs security group'
  # add a self reference ingress rule 
  SecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      # Ingress rules
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId
  # allow all inbound traffic from public internet if PubliclyAccessible = Yes
  SecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      # Ingress rules
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: '0.0.0.0/0'
      
Outputs:
  S3BucketARN:
    Description: S3 bucket ARN
    Value: !GetAtt S3Bucket.Arn
  IAMRoleARN:
    Description: IAM role ARN
    Value: !GetAtt GlueCrawlerIAMRole.Arn
